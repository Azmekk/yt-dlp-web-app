/* tslint:disable */
/* eslint-disable */
/**
 * YT-DLP-Web-App-Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OrderVideosBy,
  SaveVideoRequest,
  UpdateVideoNameRequest,
  Video,
  VideoCountResponse,
  VideoDimensions,
  VideoDownloadInfo,
  VideoNameResponse,
} from '../models/index';
import {
    OrderVideosByFromJSON,
    OrderVideosByToJSON,
    SaveVideoRequestFromJSON,
    SaveVideoRequestToJSON,
    UpdateVideoNameRequestFromJSON,
    UpdateVideoNameRequestToJSON,
    VideoFromJSON,
    VideoToJSON,
    VideoCountResponseFromJSON,
    VideoCountResponseToJSON,
    VideoDimensionsFromJSON,
    VideoDimensionsToJSON,
    VideoDownloadInfoFromJSON,
    VideoDownloadInfoToJSON,
    VideoNameResponseFromJSON,
    VideoNameResponseToJSON,
} from '../models/index';

export interface ApiVideosDeleteVideoDeleteRequest {
    videoId: number;
}

export interface ApiVideosGetMaxDimensionsGetRequest {
    videoUrl?: string;
}

export interface ApiVideosGetMp3GetRequest {
    videoName: string;
}

export interface ApiVideosGetNameGetRequest {
    videoUrl?: string;
}

export interface ApiVideosGetThumbnailGetRequest {
    thumbnailName: string;
}

export interface ApiVideosGetVideoDownloadInfoGetRequest {
    videoId: number;
}

export interface ApiVideosGetVideoGetRequest {
    videoName: string;
}

export interface ApiVideosGetVideoInfoGetRequest {
    videoId: number;
}

export interface ApiVideosListVideosGetRequest {
    take: number;
    page: number;
    orderBy?: OrderVideosBy;
    descending?: boolean;
    search?: string;
}

export interface ApiVideosSaveVideoPostRequest {
    saveVideoRequest?: SaveVideoRequest;
}

export interface ApiVideosUpdateVideoNamePatchRequest {
    updateVideoNameRequest?: UpdateVideoNameRequest;
}

/**
 * 
 */
export class VideosApi extends runtime.BaseAPI {

    /**
     */
    async apiVideosDeleteVideoDeleteRaw(requestParameters: ApiVideosDeleteVideoDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['videoId'] == null) {
            throw new runtime.RequiredError(
                'videoId',
                'Required parameter "videoId" was null or undefined when calling apiVideosDeleteVideoDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['videoId'] != null) {
            queryParameters['videoId'] = requestParameters['videoId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Videos/DeleteVideo`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiVideosDeleteVideoDelete(requestParameters: ApiVideosDeleteVideoDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiVideosDeleteVideoDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiVideosGetMaxDimensionsGetRaw(requestParameters: ApiVideosGetMaxDimensionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VideoDimensions>> {
        const queryParameters: any = {};

        if (requestParameters['videoUrl'] != null) {
            queryParameters['videoUrl'] = requestParameters['videoUrl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Videos/GetMaxDimensions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoDimensionsFromJSON(jsonValue));
    }

    /**
     */
    async apiVideosGetMaxDimensionsGet(requestParameters: ApiVideosGetMaxDimensionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VideoDimensions> {
        const response = await this.apiVideosGetMaxDimensionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiVideosGetMp3GetRaw(requestParameters: ApiVideosGetMp3GetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['videoName'] == null) {
            throw new runtime.RequiredError(
                'videoName',
                'Required parameter "videoName" was null or undefined when calling apiVideosGetMp3Get().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['videoName'] != null) {
            queryParameters['videoName'] = requestParameters['videoName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Videos/GetMp3`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiVideosGetMp3Get(requestParameters: ApiVideosGetMp3GetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiVideosGetMp3GetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiVideosGetNameGetRaw(requestParameters: ApiVideosGetNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VideoNameResponse>> {
        const queryParameters: any = {};

        if (requestParameters['videoUrl'] != null) {
            queryParameters['videoUrl'] = requestParameters['videoUrl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Videos/GetName`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiVideosGetNameGet(requestParameters: ApiVideosGetNameGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VideoNameResponse> {
        const response = await this.apiVideosGetNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiVideosGetThumbnailGetRaw(requestParameters: ApiVideosGetThumbnailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['thumbnailName'] == null) {
            throw new runtime.RequiredError(
                'thumbnailName',
                'Required parameter "thumbnailName" was null or undefined when calling apiVideosGetThumbnailGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['thumbnailName'] != null) {
            queryParameters['thumbnailName'] = requestParameters['thumbnailName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Videos/GetThumbnail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiVideosGetThumbnailGet(requestParameters: ApiVideosGetThumbnailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiVideosGetThumbnailGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiVideosGetVideoCountGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VideoCountResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Videos/GetVideoCount`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoCountResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiVideosGetVideoCountGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VideoCountResponse> {
        const response = await this.apiVideosGetVideoCountGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiVideosGetVideoDownloadInfoGetRaw(requestParameters: ApiVideosGetVideoDownloadInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VideoDownloadInfo>> {
        if (requestParameters['videoId'] == null) {
            throw new runtime.RequiredError(
                'videoId',
                'Required parameter "videoId" was null or undefined when calling apiVideosGetVideoDownloadInfoGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['videoId'] != null) {
            queryParameters['videoId'] = requestParameters['videoId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Videos/GetVideoDownloadInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoDownloadInfoFromJSON(jsonValue));
    }

    /**
     */
    async apiVideosGetVideoDownloadInfoGet(requestParameters: ApiVideosGetVideoDownloadInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VideoDownloadInfo> {
        const response = await this.apiVideosGetVideoDownloadInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiVideosGetVideoGetRaw(requestParameters: ApiVideosGetVideoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['videoName'] == null) {
            throw new runtime.RequiredError(
                'videoName',
                'Required parameter "videoName" was null or undefined when calling apiVideosGetVideoGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['videoName'] != null) {
            queryParameters['videoName'] = requestParameters['videoName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Videos/GetVideo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiVideosGetVideoGet(requestParameters: ApiVideosGetVideoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiVideosGetVideoGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiVideosGetVideoInfoGetRaw(requestParameters: ApiVideosGetVideoInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Video>> {
        if (requestParameters['videoId'] == null) {
            throw new runtime.RequiredError(
                'videoId',
                'Required parameter "videoId" was null or undefined when calling apiVideosGetVideoInfoGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['videoId'] != null) {
            queryParameters['videoId'] = requestParameters['videoId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Videos/GetVideoInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoFromJSON(jsonValue));
    }

    /**
     */
    async apiVideosGetVideoInfoGet(requestParameters: ApiVideosGetVideoInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Video> {
        const response = await this.apiVideosGetVideoInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiVideosListVideosGetRaw(requestParameters: ApiVideosListVideosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Video>>> {
        if (requestParameters['take'] == null) {
            throw new runtime.RequiredError(
                'take',
                'Required parameter "take" was null or undefined when calling apiVideosListVideosGet().'
            );
        }

        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiVideosListVideosGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['descending'] != null) {
            queryParameters['descending'] = requestParameters['descending'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Videos/ListVideos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VideoFromJSON));
    }

    /**
     */
    async apiVideosListVideosGet(requestParameters: ApiVideosListVideosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Video>> {
        const response = await this.apiVideosListVideosGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiVideosSaveVideoPostRaw(requestParameters: ApiVideosSaveVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Videos/SaveVideo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveVideoRequestToJSON(requestParameters['saveVideoRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiVideosSaveVideoPost(requestParameters: ApiVideosSaveVideoPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiVideosSaveVideoPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiVideosUpdateVideoNamePatchRaw(requestParameters: ApiVideosUpdateVideoNamePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Video>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Videos/UpdateVideoName`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateVideoNameRequestToJSON(requestParameters['updateVideoNameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoFromJSON(jsonValue));
    }

    /**
     */
    async apiVideosUpdateVideoNamePatch(requestParameters: ApiVideosUpdateVideoNamePatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Video> {
        const response = await this.apiVideosUpdateVideoNamePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
