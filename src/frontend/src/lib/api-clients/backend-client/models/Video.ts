/* tslint:disable */
/* eslint-disable */
/**
 * YT-DLP-Web-App-Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Mp3Status } from './Mp3Status';
import {
    Mp3StatusFromJSON,
    Mp3StatusFromJSONTyped,
    Mp3StatusToJSON,
} from './Mp3Status';

/**
 * 
 * @export
 * @interface Video
 */
export interface Video {
    /**
     * 
     * @type {number}
     * @memberof Video
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof Video
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Video
     */
    updatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Video
     */
    deletedAt?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    fileName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    mp3FileName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    thumbnailName?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Video
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    url?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Video
     */
    downloaded?: boolean;
    /**
     * 
     * @type {Mp3Status}
     * @memberof Video
     */
    mp3Status?: Mp3Status;
}



/**
 * Check if a given object implements the Video interface.
 */
export function instanceOfVideo(value: object): value is Video {
    return true;
}

export function VideoFromJSON(json: any): Video {
    return VideoFromJSONTyped(json, false);
}

export function VideoFromJSONTyped(json: any, ignoreDiscriminator: boolean): Video {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
        'deletedAt': json['deletedAt'] == null ? undefined : (new Date(json['deletedAt'])),
        'fileName': json['fileName'] == null ? undefined : json['fileName'],
        'mp3FileName': json['mp3FileName'] == null ? undefined : json['mp3FileName'],
        'thumbnailName': json['thumbnailName'] == null ? undefined : json['thumbnailName'],
        'size': json['size'] == null ? undefined : json['size'],
        'url': json['url'] == null ? undefined : json['url'],
        'downloaded': json['downloaded'] == null ? undefined : json['downloaded'],
        'mp3Status': json['mp3Status'] == null ? undefined : Mp3StatusFromJSON(json['mp3Status']),
    };
}

export function VideoToJSON(value?: Video | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
        'deletedAt': value['deletedAt'] == null ? undefined : ((value['deletedAt'] as any).toISOString()),
        'fileName': value['fileName'],
        'mp3FileName': value['mp3FileName'],
        'thumbnailName': value['thumbnailName'],
        'size': value['size'],
        'url': value['url'],
        'downloaded': value['downloaded'],
        'mp3Status': Mp3StatusToJSON(value['mp3Status']),
    };
}

